Перем КонтекстЯдра;
Перем Ожидаем;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	НаборТестов.НачатьГруппу("Тесты проверки рассчета суммы");
 	НаборТестов.Добавить("ТестДолжен_ПроверитьКорректныйРасчетСуммыПокупки", , "ФУНК_РС_001. Позитивный тест. расчет суммы при нормальных условиях");
	 
	НаборТестов.Добавить("ТестДолжен_ПроверитьНулевоеКоличество", , "ФУНК_РС_002. Негативный тест. поведение системы при нулевом количестве");
	НаборТестов.Добавить("ТестДолжен_ПроверитьЦенуРавнуюНулю", , "ФУНК_РС_003. Негативный тест. поведение системы при нулевой цене");
	НаборТестов.Добавить("ТестДолжен_ПроверитьСкидкуРавнуюНулю", , "ФУНК_РС_004. Позитивный тест. поведение системы при нулевой скидке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьВсеПараметрыРавныНулю", "ФУНК_РС_005. Негативный тест. поведение системы при всех значениях равных нулю");

	НаборТестов.Добавить("ТестДолжен_ПроверитьОтрицательнуюСкидку", , "ФУНК_РС_006. Негативный тест. поведения системы при отрицательной скидке");
    НаборТестов.Добавить("ТестДолжен_ПроверитьОтрицательнуюЦену", , "ФУНК_РС_007. Негативный тест. поведения системы при отрицательной цене товара");
  
    НаборТестов.Добавить("ТестДолжен_ПроверитьБольшоеКоличество", , "ФУНК_РС_008. Позитивный тест. при большом количестве товара");
	НаборТестов.Добавить("ТестДолжен_ПроверитьБольшуюСкидку", , "ФУНК_РС_009. Позитивный тест. поведения системы при большой скидке");
    НаборТестов.Добавить("ТестДолжен_ПроверитьМаксимальнуюСкидку", , "ФУНК_РС_010. Позитивный тест. поведения системы при максимальной возможной скидке");
	НаборТестов.Добавить("ТестДолжен_ПроверитьОченьБольшуюСкидку", , "ФУНК_РС_011. Негативный тест. поведения системы при очень большой скидке");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьКорректныйРасчетСуммыПокупки() Экспорт
    Количество = 5;
    Цена = 100;
    Скидка = 20;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Равно(5 * (100 - 20)); // 5 * 80 = 400
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНулевоеКоличество() Экспорт
    Количество = 0;
    Цена = 200;
    Скидка = 50;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Не_().ИмеетТип("Число"); // 0 * (200 - 50) = 0
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЦенуРавнуюНулю() Экспорт
    Количество = 10;
    Цена = 0;
    Скидка = 20;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Не_().ИмеетТип("Число"); // 10 * (-20) = -200
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСкидкуРавнуюНулю() Экспорт
    Количество = 3;
    Цена = 150;
    Скидка = 0;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Равно(3 * 150); // 3 * 150 = 450
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВсеПараметрыРавныНулю() Экспорт
    Количество = 0;
    Цена = 0;
    Скидка = 0;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Равно(0); // 0 * (0 - 0) = 0
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтрицательнуюСкидку() Экспорт
    Количество = 4;
    Цена = 120;
    Скидка = -10;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Не_().ИмеетТип("Число"); // 4 * 130 = 520
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтрицательнуюЦену() Экспорт
    Количество = 5;
    Цена = -50;
    Скидка = 10;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Не_().ИмеетТип("Число"); // 5 * (-60) = -300
КонецПроцедуры

Процедура ТестДолжен_ПроверитьБольшоеКоличество() Экспорт
    Количество = 1000;
    Цена = 1000;
    Скидка = 100;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Равно(1000 * (1000 - 100)); // 1000 * 900 = 900000
КонецПроцедуры

Процедура ТестДолжен_ПроверитьБольшуюСкидку() Экспорт
    Количество = 1;
    Цена = 1000;
    Скидка = 600;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Равно(1 * (1000 - 600)); // 400
КонецПроцедуры

Процедура ТестДолжен_ПроверитьМаксимальнуюСкидку() Экспорт
    Количество = 1;
    Цена = 1000;
    Скидка = 1000;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Равно(0); // 1 * 0 = 0
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОченьБольшуюСкидку() Экспорт
    Количество = 1;
    Цена = 1000;
    Скидка = 10000000;
    Сумма = РаботаСДокументамиКлиент.РассчитатьСуммуПокупки(Количество, Цена, Скидка);
    Ожидаем.Что(Сумма).Не_().ИмеетТип("Число"); // 1 * 0 = 0
КонецПроцедуры




